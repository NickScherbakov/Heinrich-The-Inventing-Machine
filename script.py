# Create the core TRIZ knowledge base files as YAML/CSV data
import yaml
import csv
import json
from io import StringIO

# 39 TRIZ Parameters
parameters_39 = {
    "parameters": [
        {"id": 1, "name": "Weight of moving object", "description": "Mass of object in motion"},
        {"id": 2, "name": "Weight of stationary object", "description": "Mass of stationary object"},
        {"id": 3, "name": "Length of moving object", "description": "Linear dimension of moving object"},
        {"id": 4, "name": "Length of stationary object", "description": "Linear dimension of stationary object"},
        {"id": 5, "name": "Area of moving object", "description": "Surface area of moving object"},
        {"id": 6, "name": "Area of stationary object", "description": "Surface area of stationary object"},
        {"id": 7, "name": "Volume of moving object", "description": "Space occupied by moving object"},
        {"id": 8, "name": "Volume of stationary object", "description": "Space occupied by stationary object"},
        {"id": 9, "name": "Speed", "description": "Velocity of object or process"},
        {"id": 10, "name": "Force", "description": "Force applied to object"},
        {"id": 11, "name": "Stress or pressure", "description": "Force per unit area"},
        {"id": 12, "name": "Shape", "description": "External form of object"},
        {"id": 13, "name": "Stability of object's composition", "description": "Integrity of object structure"},
        {"id": 14, "name": "Strength", "description": "Ability to resist breaking"},
        {"id": 15, "name": "Duration of action of moving object", "description": "Time of moving object activity"},
        {"id": 16, "name": "Duration of action of stationary object", "description": "Time of stationary object activity"},
        {"id": 17, "name": "Temperature", "description": "Thermal condition"},
        {"id": 18, "name": "Illumination intensity", "description": "Amount of light"},
        {"id": 19, "name": "Use of energy by moving object", "description": "Energy consumption by moving object"},
        {"id": 20, "name": "Use of energy by stationary object", "description": "Energy consumption by stationary object"},
        {"id": 21, "name": "Power", "description": "Rate of energy transfer"},
        {"id": 22, "name": "Loss of energy", "description": "Waste of useful energy"},
        {"id": 23, "name": "Loss of substance", "description": "Waste of useful material"},
        {"id": 24, "name": "Loss of information", "description": "Loss of useful data"},
        {"id": 25, "name": "Loss of time", "description": "Waste of useful time"},
        {"id": 26, "name": "Quantity of substance", "description": "Amount of material"},
        {"id": 27, "name": "Reliability", "description": "System's ability to perform consistently"},
        {"id": 28, "name": "Measurement accuracy", "description": "Precision of measurement"},
        {"id": 29, "name": "Manufacturing precision", "description": "Accuracy of production"},
        {"id": 30, "name": "External harm affects the object", "description": "Harmful external influences"},
        {"id": 31, "name": "Object-generated harmful factors", "description": "Harmful factors generated by object"},
        {"id": 32, "name": "Ease of manufacture", "description": "Simplicity of production"},
        {"id": 33, "name": "Ease of operation", "description": "Simplicity of use"},
        {"id": 34, "name": "Ease of repair", "description": "Simplicity of maintenance"},
        {"id": 35, "name": "Adaptability or versatility", "description": "Ability to respond to changes"},
        {"id": 36, "name": "Device complexity", "description": "Complexity of system structure"},
        {"id": 37, "name": "Difficulty of detecting and measuring", "description": "Complexity of observation"},
        {"id": 38, "name": "Extent of automation", "description": "Level of automatic operation"},
        {"id": 39, "name": "Productivity", "description": "Rate of useful output"}
    ]
}

# 40 TRIZ Principles (abbreviated for space - full version would include all sub-principles)
principles_40 = {
    "principles": [
        {"id": 1, "name": "Segmentation", "description": "Divide object into independent parts", 
         "sub_principles": ["Divide object", "Make object easy to disassemble", "Increase degree of fragmentation"]},
        {"id": 2, "name": "Taking out", "description": "Separate interfering part or property",
         "sub_principles": ["Separate useful part", "Single out harmful part", "Separate interfering part"]},
        {"id": 3, "name": "Local quality", "description": "Change structure from uniform to non-uniform",
         "sub_principles": ["Make parts fulfill different functions", "Make parts have different conditions"]},
        {"id": 4, "name": "Asymmetry", "description": "Change symmetrical forms to asymmetrical",
         "sub_principles": ["Change to asymmetrical form", "Increase asymmetry degree"]},
        {"id": 5, "name": "Merging", "description": "Bring closer together identical objects",
         "sub_principles": ["Merge identical objects", "Make operations contiguous or parallel"]},
        {"id": 15, "name": "Dynamics", "description": "Allow object to adapt or be adaptive",
         "sub_principles": ["Make object adaptive", "Divide into movable parts", "Increase mobility degree"]},
        {"id": 35, "name": "Parameter changes", "description": "Change physical or chemical state",
         "sub_principles": ["Change state", "Change concentration", "Change degree of flexibility"]}
    ]
}

# Sample contradiction matrix (simplified - real version is 39x39)
contradiction_matrix_sample = [
    ["improving_param", "worsening_param", "principle_1", "principle_2", "principle_3", "principle_4"],
    [9, 19, 15, 2, 35, None],  # Speed vs Energy use -> Dynamics, Taking out, Parameter changes
    [14, 1, 1, 15, 8, 40],     # Strength vs Weight -> Segmentation, Dynamics, etc.
    [27, 36, 2, 15, 16, None]  # Reliability vs Complexity -> Taking out, Dynamics, Strong oxidants
]

# Save as YAML files
parameters_yaml = yaml.dump(parameters_39, default_flow_style=False, sort_keys=False)
principles_yaml = yaml.dump(principles_40, default_flow_style=False, sort_keys=False)

# Save contradiction matrix as CSV
matrix_csv = StringIO()
writer = csv.writer(matrix_csv)
for row in contradiction_matrix_sample:
    writer.writerow(row)
matrix_csv_content = matrix_csv.getvalue()

print("=== 39_parameters.yaml ===")
print(parameters_yaml[:500] + "..." if len(parameters_yaml) > 500 else parameters_yaml)
print("\n=== 40_principles.yaml ===")  
print(principles_yaml[:500] + "..." if len(principles_yaml) > 500 else principles_yaml)
print("\n=== contradiction_matrix.csv ===")
print(matrix_csv_content)

# Create sample effects database
effects_db = {
    "effects": [
        {
            "id": "thermal_expansion",
            "name": "Thermal Expansion", 
            "category": "thermal",
            "description": "Materials expand when heated",
            "applications": ["Temperature sensors", "Actuators", "Compensation mechanisms"],
            "references": ["Physics textbooks", "Materials science"]
        },
        {
            "id": "electromagnetic_induction",
            "name": "Electromagnetic Induction",
            "category": "electromagnetic", 
            "description": "Changing magnetic field induces electric current",
            "applications": ["Generators", "Transformers", "Induction heating"],
            "references": ["Faraday's law", "Electromagnetic theory"]
        },
        {
            "id": "surface_tension",
            "name": "Surface Tension",
            "category": "fluid",
            "description": "Liquid surface acts like elastic membrane",
            "applications": ["Droplet formation", "Wetting", "Capillary effects"],
            "references": ["Fluid mechanics", "Surface chemistry"]
        }
    ]
}

effects_json = json.dumps(effects_db, indent=2)
print("\n=== effects_database.json ===")
print(effects_json[:400] + "..." if len(effects_json) > 400 else effects_json)